// –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Claude API
import { testClaudeConnection, generateWithClaude } from './claudeApi';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API
export const runClaudeTest = async () => {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Claude API...');
  
  try {
    // –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    const isConnected = await testClaudeConnection();
    
    if (isConnected) {
      console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Claude API —É—Å–ø—ñ—à–Ω–µ!');
      
      // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
      console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó...');
      const result = await generateWithClaude('–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–æ—Ç–∫–æ.');
      console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
      console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      
      return true;
    } else {
      console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Claude API');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
    return false;
  }
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É (—è–∫—â–æ —Ñ–∞–π–ª –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É)
if (typeof window !== 'undefined') {
  // –í –±—Ä–∞—É–∑–µ—Ä—ñ
  (window as any).runClaudeTest = runClaudeTest;
  console.log('üí° –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–∞ –≤–∏–∫–æ–Ω–∞–π—Ç–µ: runClaudeTest()');
}
