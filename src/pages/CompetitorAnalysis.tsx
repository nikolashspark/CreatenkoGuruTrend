import React, { useState, useEffect } from 'react';
import { generateWithClaude } from '../services/claudeApi';
import { scrapeFacebookAds, getSavedFacebookAds, analyzeAdWithAI } from '../services/apifyService';
import { analyzeVideoWithGemini } from '../services/geminiService';

interface CompetitorAd {
  id: string;
  text: string;
  imageUrl?: string;
  videoUrl?: string;
  pageName: string;
  adType: string;
  createdAt: string;
}

const CompetitorAnalysis: React.FC = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [ads, setAds] = useState<CompetitorAd[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [analysis, setAnalysis] = useState<string | null>(null);
  const [pageId, setPageId] = useState('161970940341938');
  const [country, setCountry] = useState('US');
  const [count, setCount] = useState(10);
  const [useGemini, setUseGemini] = useState(false);
  const [videoAnalysis, setVideoAnalysis] = useState<Record<string, string>>({});
  const [viewMode, setViewMode] = useState<'saved' | 'new'>('saved');
  const [analyzingAds, setAnalyzingAds] = useState<Record<string, boolean>>({});
  const [aiAnalysis, setAiAnalysis] = useState<Record<string, string>>({});

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  useEffect(() => {
    loadSavedAds();
  }, []);

  const loadSavedAds = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      console.log('üì• Loading saved ads from Supabase...');
      const savedAds = await getSavedFacebookAds();
      setAds(savedAds);
      console.log(`‚úÖ Loaded ${savedAds.length} saved ads`);
      setViewMode('saved');
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤–∂–µ —ñ—Å–Ω—É—é—á—ñ –∞–Ω–∞–ª—ñ–∑–∏
      const existingAnalyses: Record<string, string> = {};
      savedAds.forEach((ad: any) => {
        if (ad.vertexAnalysis) {
          existingAnalyses[ad.id] = ad.vertexAnalysis;
        }
      });
      setAiAnalysis(existingAnalyses);
    } catch (err: any) {
      console.error('Failed to load saved ads:', err);
      setError(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${err.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleAnalyzeAd = async (adId: string, forceReanalyze: boolean = false) => {
    setAnalyzingAds(prev => ({ ...prev, [adId]: true }));
    setError(null);
    
    try {
      console.log(`ü§ñ Analyzing ad ${adId}...`);
      const result = await analyzeAdWithAI(adId, forceReanalyze);
      
      setAiAnalysis(prev => ({
        ...prev,
        [adId]: result.analysis
      }));
      
      if (result.cached) {
        console.log('‚úÖ Loaded cached analysis');
      } else {
        console.log('‚úÖ New analysis completed and saved');
      }
    } catch (err: any) {
      console.error('Analysis error:', err);
      setError(`–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: ${err.message}`);
    } finally {
      setAnalyzingAds(prev => ({ ...prev, [adId]: false }));
    }
  };

  const analyzeCompetitors = async () => {
    setIsLoading(true);
    setError(null);
    setAds([]);
    setAnalysis(null);

    try {
      // –°–∫—Ä–∞–ø–∏–º–æ Facebook Ads —á–µ—Ä–µ–∑ Apify
      console.log(`Scraping Facebook Ads for page ${pageId} in ${country}, count: ${count}`);
      const scrapeResult = await scrapeFacebookAds(pageId, country, count);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –Ω–æ–≤—ñ –∫—Ä–µ–∞—Ç–∏–≤–∏
      if (scrapeResult.savedCount === 0 && (scrapeResult.duplicatesCount || 0) > 0) {
        setError(`‚ö†Ô∏è ${scrapeResult.message || '–í—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –∫—Ä–µ–∞—Ç–∏–≤–∏ –≤–∂–µ —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ –∑–±—ñ–ª—å—à—Ç–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å.'}`);
        setIsLoading(false);
        return;
      }
      
      // –Ø–∫—â–æ Apify –ø–æ–≤–µ—Ä–Ω—É–≤ newAdsForAnalysis - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —ó—Ö, —ñ–Ω–∞–∫—à–µ –≤—Å—ñ ads
      const scrapedAds = scrapeResult.ads || scrapeResult;
      const newAdsForAnalysis = scrapeResult.newAdsForAnalysis || [];
      
      setAds(scrapedAds);

      console.log('üìä Scraped ads:', scrapedAds.length);
      console.log('üìä New ads for analysis:', newAdsForAnalysis.length);
      console.log('üìä Duplicates skipped:', scrapeResult.duplicatesCount || 0);
      console.log('üìä Total scraped from Apify:', scrapeResult.totalScraped || 0);
      console.log('üìä Unique ads saved:', scrapeResult.savedCount || 0);
      console.log('üìä Ads with video:', scrapedAds.filter(ad => ad.videoUrl).length);
      if (scrapedAds.length > 0) {
        console.log('üìä Sample ad:', scrapedAds[0]);
      }
      
      // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      if (scrapeResult.message) {
        console.log(`‚ÑπÔ∏è ${scrapeResult.message}`);
      }

      // –Ø–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ Gemini - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–Ω–∞–ª—ñ–∑—É—î–º–æ –ù–û–í–Ü –∫—Ä–µ–∞—Ç–∏–≤–∏ —á–µ—Ä–µ–∑ Vertex AI
      let geminiVideoInsights: Record<string, string> = {};
      
      console.log('üîç Checking useGemini state:', useGemini);
      
      if (useGemini && newAdsForAnalysis.length > 0) {
        console.log(`‚úÖ Vertex AI auto-analysis is ENABLED - analyzing ${newAdsForAnalysis.length} new ads`);
        
        for (let i = 0; i < newAdsForAnalysis.length; i++) {
          const ad = newAdsForAnalysis[i];
          try {
            console.log(`üîÑ [${i+1}/${newAdsForAnalysis.length}] Analyzing ad ${ad.id} with Vertex AI...`);
            
            const result = await analyzeAdWithAI(ad.id, false);
            
            geminiVideoInsights[ad.id] = result.analysis;
            setVideoAnalysis(prev => ({
              ...prev,
              [ad.id]: result.analysis
            }));
            
            console.log(`‚úÖ [${i+1}/${newAdsForAnalysis.length}] Ad ${ad.id} analyzed`);
          } catch (analysisErr: any) {
            console.error(`‚ùå Failed to analyze ad ${ad.id}:`, analysisErr);
            // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ
          }
        }
        
        console.log('üéâ Auto-analysis completed for all new ads');
      } else if (useGemini) {
        console.log('‚ö†Ô∏è Vertex AI is enabled but no new ads to analyze (all were duplicates or no media)');
      } else {
        console.log('‚ö†Ô∏è Vertex AI auto-analysis is disabled');
      }
      
      // –°—Ç–∞—Ä–∏–π –∫–æ–¥ –¥–ª—è –≤—ñ–¥–µ–æ –∞–Ω–∞–ª—ñ–∑—É (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
      if (useGemini && newAdsForAnalysis.length === 0) {
        console.log('‚úÖ Vertex AI video analysis is ENABLED (old flow)');
        const videoAds = scrapedAds.filter(ad => ad.videoUrl);
        console.log(`üìπ Found ${videoAds.length} video ads to analyze`);
        
        if (videoAds.length === 0) {
          console.warn('‚ö†Ô∏è No video ads found! All ads:', scrapedAds.map(ad => ({
            id: ad.id,
            type: ad.adType,
            hasVideo: !!ad.videoUrl,
            hasImage: !!ad.imageUrl
          })));
        }
        
        for (const ad of videoAds) {
          try {
            console.log(`üîÑ Analyzing video ${ad.id} with Vertex AI...`);
            console.log(`Video URL: ${ad.videoUrl}`);
            const videoAnalysisResult = await analyzeVideoWithGemini(ad.videoUrl!);
            console.log(`‚úÖ Video ${ad.id} analyzed successfully`);
            
            geminiVideoInsights[ad.id] = videoAnalysisResult;
            
            setVideoAnalysis(prev => ({
              ...prev,
              [ad.id]: videoAnalysisResult
            }));
          } catch (videoErr: any) {
            console.error(`‚ùå Failed to analyze video ${ad.id}:`, videoErr);
            setError(`–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–µ–æ ${ad.id}: ${videoErr.message}`);
          }
        }
        console.log('üéâ All videos analyzed by Gemini');
      } else {
        console.log('‚ö†Ô∏è Vertex AI video analysis is disabled (checkbox not checked)');
      }

      // –¢–µ–ø–µ—Ä Claude –∞–Ω–∞–ª—ñ–∑—É—î –≤—Å–µ —Ä–∞–∑–æ–º (–≤–∫–ª—é—á–∞—é—á–∏ —ñ–Ω—Å–∞–π—Ç–∏ –≤—ñ–¥ Gemini)
      const analysisPrompt = `
        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü—ñ –∫—Ä–µ–∞—Ç–∏–≤–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ –∑ Facebook Ads:
        
        ${scrapedAds.map((ad, index) => `
        –ö—Ä–µ–∞—Ç–∏–≤ ${index + 1}:
        - –°—Ç–æ—Ä—ñ–Ω–∫–∞: ${ad.pageName}
        - –¢–∏–ø: ${ad.adType}
        - –¢–µ–∫—Å—Ç: ${ad.text}
        - –î–∞—Ç–∞: ${new Date(ad.createdAt).toLocaleDateString()}
        ${ad.imageUrl ? `- –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è URL: ${ad.imageUrl}` : ''}
        
        ${geminiVideoInsights[ad.id] ? `
        üìπ –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –í–Ü–î–ï–û –≤—ñ–¥ Gemini AI:
        ${geminiVideoInsights[ad.id]}
        ` : ''}
        `).join('\n\n---\n\n')}
        
        ${useGemini ? `
        ‚ú® –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤—ñ–¥–µ–æ –≤—ñ–¥ Gemini AI (–≤—ñ–∑—É–∞–ª—å–Ω—ñ –¥–µ—Ç–∞–ª—ñ, –¥–∏–Ω–∞–º—ñ–∫–∞, –µ–º–æ—Ü—ñ—ó, –∫–∞–¥—Ä–∏).
        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ü—ñ —ñ–Ω—Å–∞–π—Ç–∏ –¥–ª—è –≥–ª–∏–±—à–æ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É.
        ` : ''}
        
        –ü—Ä–æ–≤–µ–¥–∏ –°–¢–†–ê–¢–ï–ì–Ü–ß–ù–ò–ô –∞–Ω–∞–ª—ñ–∑:
        1. üéØ –¢—Ä–µ–Ω–¥–∏ –≤ –∫—Ä–µ–∞—Ç–∏–≤—ñ (—Å—Ç–∏–ª—å, —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å, –ø—ñ–¥—Ö–æ–¥–∏)
        2. üé® –í—ñ–∑—É–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ (–∫–æ–ª—å–æ—Ä–∏, –∫–æ–º–ø–æ–∑–∏—Ü—ñ—è, —Å—Ç–∏–ª—å)
        3. üì£ –ü—Ä–∏–∫–ª–∏–∫–∏ –¥–æ –¥—ñ—ó (CTA, –º–æ—Ç–∏–≤–∞—Ü—ñ—è)
        4. üë• –¶—ñ–ª—å–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è (—Ö—Ç–æ –º–æ–∂–µ –±—É—Ç–∏ —Ü—ñ–ª–ª—é)
        5. ‚≠ê –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –±—Ä–µ–Ω–¥—É
        6. üí° –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –Ω–∞—à–æ–≥–æ –±—Ä–µ–Ω–¥—É
        
        ${useGemini ? `
        7. üé¨ –Ü–Ω—Å–∞–π—Ç–∏ –∑ –≤—ñ–¥–µ–æ –∞–Ω–∞–ª—ñ–∑—É (—â–æ –ø—Ä–∞—Ü—é—î –≤ –¥–∏–Ω–∞–º—ñ—Ü—ñ, –µ–º–æ—Ü—ñ—è—Ö, –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö –µ—Ñ–µ–∫—Ç–∞—Ö)
        ` : ''}
        
        –ù–∞–¥–∞–π –ö–û–ù–ö–†–ï–¢–ù–Ü —Ç–∞ –ü–†–ê–ö–¢–ò–ß–ù–Ü —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤.
      `;

      const analysisResponse = await generateWithClaude(analysisPrompt);
      setAnalysis(analysisResponse);
      
      // –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –Ω–∞ —Ä–µ–∂–∏–º "–Ω–æ–≤—ñ"
      setViewMode('new');

    } catch (err: any) {
      setError(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤: ${err.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            üîç –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤
          </h1>
          <p className="text-lg text-gray-600">
            –ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ –∑ Facebook Ads Library
          </p>
        </div>

        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="bg-white rounded-lg shadow-md p-4 mb-6">
          <div className="flex gap-4">
            <button
              onClick={loadSavedAds}
              disabled={isLoading}
              className={`flex-1 py-3 px-6 rounded-lg font-semibold transition ${
                viewMode === 'saved'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              } disabled:opacity-50`}
            >
              üíæ –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ({ads.length > 0 && viewMode === 'saved' ? ads.length : '...'})
            </button>
            <button
              onClick={() => setViewMode('new')}
              className={`flex-1 py-3 px-6 rounded-lg font-semibold transition ${
                viewMode === 'new'
                  ? 'bg-green-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              üÜï –ù–æ–≤–∏–π –ø–æ—à—É–∫
            </button>
          </div>
        </div>

        {/* –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞–Ω–∞–ª—ñ–∑—É */}
        {viewMode === 'new' && (
        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞–Ω–∞–ª—ñ–∑—É</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Page ID
              </label>
              <input
                type="text"
                value={pageId}
                onChange={(e) => setPageId(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="161970940341938"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ö—Ä–∞—ó–Ω–∞
              </label>
              <select
                value={country}
                onChange={(e) => setCountry(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="US">–°–®–ê</option>
                <option value="UA">–£–∫—Ä–∞—ó–Ω–∞</option>
                <option value="GB">–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è</option>
                <option value="DE">–ù—ñ–º–µ—á—á–∏–Ω–∞</option>
                <option value="FR">–§—Ä–∞–Ω—Ü—ñ—è</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤
              </label>
              <input
                type="number"
                value={count}
                onChange={(e) => setCount(Math.max(10, parseInt(e.target.value) || 10))}
                min="10"
                max="100"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="10"
              />
              <p className="text-xs text-gray-500 mt-1">–ú—ñ–Ω—ñ–º—É–º 10, –º–∞–∫—Å–∏–º—É–º 100</p>
            </div>
          </div>
          
          {/* –û–ø—Ü—ñ—è Gemini */}
          <div className="mt-4 flex items-center">
            <input
              type="checkbox"
              id="useGemini"
              checked={useGemini}
              onChange={(e) => setUseGemini(e.target.checked)}
              className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
            />
            <label htmlFor="useGemini" className="ml-2 text-sm text-gray-700">
              ü§ñ <strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —á–µ—Ä–µ–∑ Vertex AI Gemini</strong> (–¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤—ñ–¥–µ–æ —Ç–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫, –¥–∏–Ω–∞–º—ñ–∫–∞, –µ–º–æ—Ü—ñ—ó, –≤—ñ–∑—É–∞–ª—å–Ω—ñ –µ—Ñ–µ–∫—Ç–∏) - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–Ω–∞–ª—ñ–∑—É—î –≤—Å—ñ –ù–û–í–Ü –∫—Ä–µ–∞—Ç–∏–≤–∏ –ø—ñ—Å–ª—è –ø–æ—à—É–∫—É
            </label>
          </div>
          <div className="mt-2 ml-6 text-xs text-gray-500">
            üí° –Ø–∫—â–æ –≤–∏–º–∫–Ω–µ–Ω–æ - –∞–Ω–∞–ª—ñ–∑ —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "ü§ñ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏" –Ω–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–µ–∞—Ç–∏–≤—ñ –æ–∫—Ä–µ–º–æ
          </div>
        </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª—ñ–∑—É */}
        {viewMode === 'new' && (
        <div className="text-center mb-8">
          <button
            onClick={analyzeCompetitors}
            disabled={isLoading}
            className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white font-bold py-3 px-8 rounded-lg transition duration-200"
          >
            {isLoading ? (
              <span>
                üîÑ {useGemini ? '–ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑ Vertex AI...' : '–°–∫—Ä–∞–ø–∏–º–æ...'}
              </span>
            ) : (
              'üöÄ –ü–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑'
            )}
          </button>
        </div>
        )}

        {/* –ü–æ–º–∏–ª–∫–∞ */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            {error}
          </div>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É */}
        {ads.length > 0 && (
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">
                {viewMode === 'saved' ? 'üíæ –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∫—Ä–µ–∞—Ç–∏–≤–∏' : 'üÜï –ù–æ–≤—ñ –∫—Ä–µ–∞—Ç–∏–≤–∏'} ({ads.length})
              </h2>
              {viewMode === 'saved' && (
                <button
                  onClick={loadSavedAds}
                  disabled={isLoading}
                  className="bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 text-white py-2 px-4 rounded text-sm"
                >
                  üîÑ –û–Ω–æ–≤–∏—Ç–∏
                </button>
              )}
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {ads.map((ad, index) => (
                <div key={ad.id || index} className="border border-gray-200 rounded-lg p-4">
                  <div className="mb-3">
                    <h3 className="font-semibold text-gray-900">{ad.pageName}</h3>
                    <p className="text-sm text-gray-500">{ad.adType} ‚Ä¢ {new Date(ad.createdAt).toLocaleDateString()}</p>
                  </div>
                  
                  {ad.videoUrl ? (
                    <div className="mb-3">
                      <video 
                        src={ad.videoUrl} 
                        controls 
                        className="w-full h-48 object-cover rounded"
                        poster={ad.imageUrl || undefined}
                      />
                    </div>
                  ) : ad.imageUrl ? (
                    <div className="mb-3">
                      <img 
                        src={ad.imageUrl} 
                        alt="Ad creative" 
                        className="w-full h-48 object-cover rounded"
                      />
                    </div>
                  ) : null}
                  
                  <p className="text-sm text-gray-700 mb-2">{ad.text}</p>
                  {ad.videoUrl && (
                    <a 
                      href={ad.videoUrl} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="text-xs text-blue-600 hover:underline block mb-2"
                    >
                      üé• –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤—ñ–¥–µ–æ
                    </a>
                  )}
                  
                  {/* –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —á–µ—Ä–µ–∑ AI - —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –º–µ–¥—ñ–∞ */}
                  {viewMode === 'saved' && (ad.imageUrl || ad.videoUrl) && (ad.imageUrl !== null || ad.videoUrl !== null) && (
                    <div className="mt-3">
                      <button
                        onClick={() => handleAnalyzeAd(ad.id, !!aiAnalysis[ad.id])}
                        disabled={analyzingAds[ad.id]}
                        className={`w-full py-2 px-3 rounded text-sm font-medium transition ${
                          aiAnalysis[ad.id]
                            ? 'bg-green-100 text-green-700 hover:bg-green-200 border border-green-300'
                            : 'bg-blue-100 text-blue-700 hover:bg-blue-200 border border-blue-300'
                        } disabled:opacity-50 disabled:cursor-not-allowed`}
                      >
                        {analyzingAds[ad.id] ? (
                          '‚è≥ –ê–Ω–∞–ª—ñ–∑—É—î–º–æ...'
                        ) : aiAnalysis[ad.id] ? (
                          'üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑'
                        ) : (
                          `ü§ñ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ ${ad.adType === 'VIDEO' ? '–≤—ñ–¥–µ–æ' : '–∫–∞—Ä—Ç–∏–Ω–∫—É'}`
                        )}
                      </button>
                    </div>
                  )}
                  
                  {/* AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
                  {aiAnalysis[ad.id] && (
                    <div className="mt-3 p-3 bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-300 rounded-lg">
                      <h4 className="text-xs font-bold text-purple-900 mb-2 flex items-center gap-1">
                        ü§ñ AI –ê–Ω–∞–ª—ñ–∑ (Gemini 2.0 Flash)
                      </h4>
                      <div className="text-xs text-gray-800 whitespace-pre-wrap max-h-64 overflow-y-auto">
                        {aiAnalysis[ad.id]}
                      </div>
                    </div>
                  )}
                  
                  {/* Gemini –∞–Ω–∞–ª—ñ–∑ –≤—ñ–¥–µ–æ (—Å—Ç–∞—Ä–∏–π –¥–ª—è –Ω–æ–≤–∏—Ö –ø–æ—à—É–∫—ñ–≤) */}
                  {videoAnalysis[ad.id] && (
                    <div className="mt-3 p-3 bg-purple-50 border border-purple-200 rounded">
                      <h4 className="text-xs font-semibold text-purple-900 mb-2">ü§ñ Gemini Video Analysis:</h4>
                      <p className="text-xs text-purple-800 whitespace-pre-wrap">{videoAnalysis[ad.id]}</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ê–Ω–∞–ª—ñ–∑ */}
        {analysis && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold mb-4">–ê–Ω–∞–ª—ñ–∑ –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤</h2>
            <div className="prose max-w-none">
              <pre className="whitespace-pre-wrap text-sm text-gray-700">
                {analysis}
              </pre>
            </div>
          </div>
        )}

        {/* –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mt-8">
          <h3 className="text-lg font-semibold text-blue-900 mb-2">
            üí° –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î
          </h3>
          <ul className="text-blue-800 space-y-2">
            <li>‚Ä¢ –í–≤–µ–¥—ñ—Ç—å Page ID –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –∑ Facebook</li>
            <li>‚Ä¢ –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É</li>
            <li>‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑"</li>
            <li>‚Ä¢ AI –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î –∫—Ä–µ–∞—Ç–∏–≤–∏ —Ç–∞ –¥–∞—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default CompetitorAnalysis;
